<?php

namespace Tests\Feature;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class SearchTest extends TestCase
{
    private array $filters;
    private string $baseUrl = 'api/search';

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->filters = [
            'news' => [
                '?filter=date&value=2020-02-20',
                '?filter=title&value=news-title',
                '?filter=source&value=CNN',
            ],
            'instagram' => [
                '?filter=date&value=2020-02-20',
                '?filter=title&value=instagram-title',
                '?filter=username&value=instagram',
            ],
            'twitter' => [
                '?filter=date&value=2020-02-20',
                '?filter=name&value=twitter',
            ],
        ];
    }

    public function testNews()
    {
        foreach($this->filters['news'] as $filter) {
            $response = $this->get($this->baseUrl.'/news'.$filter);
            $response->assertStatus(200);
            $response->assertJsonStructure([
                'data' => [
                    '*' => [
                        'title',
                        'source',
                        'content',
                        'link',
                        'avatar',
                    ]
                ]
            ]);
        }
    }

    public function testInstagram()
    {
        foreach($this->filters['instagram'] as $filter) {
            $response = $this->get($this->baseUrl.'/instagram'.$filter);
            $response->assertStatus(200);
            $response->assertJsonStructure([
                'data' => [
                    '*' => [
                        'title',
                        'photo',
                        'video',
                        'content',
                        'name',
                        'avatar',
                        'username',
                    ]
                ]
            ]);
        }
    }

    public function testTwitter()
    {
        foreach($this->filters['twitter'] as $filter) {
            $response = $this->get($this->baseUrl.'/twitter'.$filter);
            $response->assertStatus(200);
            $response->assertJsonStructure([
                'data' => [
                    '*' => [
                        'content',
                        'name',
                        'retweet',
                        'photo',
                        'avatar',
                    ]
                ]
            ]);
        }
    }
}
