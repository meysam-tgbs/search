<?php

namespace Tests\Unit;

use App\Repositories\Search;
use App\Repositories\SearchRepository;
// use PHPUnit\Framework\TestCase;
use Tests\TestCase;
use App\Services\SearchService;

class SearchServiceTest extends TestCase
{
    private SearchService $service;
    private Search $newsModel;
    private Search $instagramModel;
    private Search $twitterModel;
    private SearchRepository $repository;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->service = resolve(SearchService::class);
        $this->repository = resolve(SearchRepository::class);
        $this->init();
    }

    public function testResultIfIsInstantiateOfSearch()
    {
        $searchModel = $this->service->findByDate($this->newsModel->getDate());

        $this->assertIsArray($searchModel);
        $this->assertNotEmpty($searchModel);
        $this->assertInstanceOf(Search::class, $searchModel[0]);
    }

    public function testFindByDate()
    {
        $searchModel = $this->service->findByDate($this->newsModel->getDate());

        $this->assertNotEmpty($searchModel);
    }

    public function testFindByTitle()
    {
        $searchModel = $this->service->findByTitle($this->newsModel->getTitle());

        $this->assertNotEmpty($searchModel);
    }

    public function testFindByUsername()
    {
        $this->service->setType(Search::TYPE_INSTAGRAM);
        $searchModel = $this->service->findByUsername($this->instagramModel->getUsername());
        $this->service->setType(Search::TYPE_NEWS);

        $this->assertNotEmpty($searchModel);
    }

    public function testFindByName()
    {
        $this->service->setType(Search::TYPE_TWITTER);
        $searchModel = $this->service->findByName($this->twitterModel->getName());
        $this->service->setType(Search::TYPE_NEWS);

        $this->assertNotEmpty($searchModel);
    }

    public function testFindBySource()
    {
        $searchModel = $this->service->findBySource($this->newsModel->getSource());

        $this->assertNotEmpty($searchModel);
    }

    public function testFindByDateIfInputIsInvalid()
    {
        $searchModel = $this->service->findByDate('1000-00-00');
        $this->assertEmpty($searchModel);
    }

    public function testFindByTitleIfInputIsInvalid()
    {
        $searchModel = $this->service->findByTitle('Invalid title qqqqq');
        $this->assertEmpty($searchModel);
    }

    public function testFindByUsernameIfInputIsInvalid()
    {
        $searchModel = $this->service->findByUsername('invalid_username_lorem_ipsum');
        $this->assertEmpty($searchModel);
    }

    public function testFindBySourceIfInputIsInvalid()
    {
        $searchModel = $this->service->findByUsername('invalid_username_lorem_ipsum');
        $this->assertEmpty($searchModel);
    }

    public function testFindByNameIfInputIsInvalid()
    {
        $searchModel = $this->service->findByName('invalid_name_lorem_ipsum');
        $this->assertEmpty($searchModel);
    }

    private function init()
    {
        $this->newsModel = (New Search())
            ->setType(Search::TYPE_NEWS)
            ->setId('xx1')
            ->setDate('2020-02-20')
            ->setTitle('test title')
            ->setContent('test content')
            ->setSource(Search::SOURCE_CNN)
            ->setLink('https://cnn.com/news/test')
            ->setAvatar('https://cnn.com/avatar.png')
            ;

        $this->instagramModel = (New Search())
            ->setType(Search::TYPE_INSTAGRAM)
            ->setId('xx2')
            ->setDate('2020-02-20')
            ->setTitle('test title')
            ->setPhoto('https://instagram.com/photo.jpg')
            ->setVideo('https://instagram.com/video.mp4')
            ->setContent('test content')
            ->setName('Taylor Otwell')
            ->setAvatar('https://cnn.com/avatar.png')
            ->setUsername('taylor.otwell')
            ;

        $this->twitterModel = (New Search())
            ->setType(Search::TYPE_TWITTER)
            ->setId('xx3')
            ->setDate('2020-02-20')
            ->setName('Taylor Otwell')
            ->setContent('test content')
            ->setRetweet(10)
            ->setPhoto('https://twitter.com/photo.jpg')
            ->setAvatar('https://twitter.com/taylorotwell.png')
            ;

        $this->repository->persist($this->newsModel);
        $this->repository->persist($this->instagramModel);
        $this->repository->persist($this->twitterModel);
    }

    public function tearDown(): void
    {
        // parent::tearDown();

        $this->repository->delete($this->newsModel->getId());
        $this->repository->delete($this->instagramModel->getId());
        $this->repository->delete($this->twitterModel->getId());
    }
}
